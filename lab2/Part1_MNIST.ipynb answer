{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Part1_MNIST.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "Xmf_JRJa_N8C"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xmf_JRJa_N8C"
      },
      "source": [
        "<table align=\"center\">\n",
        "  <td align=\"center\"><a target=\"_blank\" href=\"http://introtodeeplearning.com\">\n",
        "        <img src=\"http://introtodeeplearning.com/images/colab/mit.png\" style=\"padding-bottom:5px;\" />\n",
        "      Visit MIT Deep Learning</a></td>\n",
        "  <td align=\"center\"><a target=\"_blank\" href=\"https://colab.research.google.com/github/aamini/introtodeeplearning/blob/master/lab2/Part1_MNIST.ipynb\">\n",
        "        <img src=\"http://introtodeeplearning.com/images/colab/colab.png?v2.0\"  style=\"padding-bottom:5px;\" />Run in Google Colab</a></td>\n",
        "  <td align=\"center\"><a target=\"_blank\" href=\"https://github.com/aamini/introtodeeplearning/blob/master/lab2/Part1_MNIST.ipynb\">\n",
        "        <img src=\"http://introtodeeplearning.com/images/colab/github.png\"  height=\"70px\" style=\"padding-bottom:5px;\"  />View Source on GitHub</a></td>\n",
        "</table>\n",
        "\n",
        "# Copyright Information"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gKA_J7bdP33T"
      },
      "source": [
        "# Copyright 2020 MIT 6.S191 Introduction to Deep Learning. All Rights Reserved.\n",
        "# \n",
        "# Licensed under the MIT License. You may not use this file except in compliance\n",
        "# with the License. Use and/or modification of this code outside of 6.S191 must\n",
        "# reference:\n",
        "#\n",
        "# Â© MIT 6.S191: Introduction to Deep Learning\n",
        "# http://introtodeeplearning.com\n",
        "#"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Cm1XpLftPi4A"
      },
      "source": [
        "# Laboratory 2: Computer Vision\n",
        "\n",
        "# Part 1: MNIST Digit Classification\n",
        "\n",
        "In the first portion of this lab, we will build and train a convolutional neural network (CNN) for classification of handwritten digits from the famous [MNIST](http://yann.lecun.com/exdb/mnist/) dataset. The MNIST dataset consists of 60,000 training images and 10,000 test images. Our classes are the digits 0-9.\n",
        "\n",
        "First, let's download the course repository, install dependencies, and import the relevant packages we'll need for this lab."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RsGqx_ai_N8F",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "23b0dd8f-db6b-477d-908f-c23421d4265f"
      },
      "source": [
        "# Import Tensorflow 2.0\n",
        "%tensorflow_version 2.x\n",
        "import tensorflow as tf \n",
        "\n",
        "!pip install mitdeeplearning\n",
        "import mitdeeplearning as mdl\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import random\n",
        "from tqdm import tqdm\n",
        "\n",
        "# Check that we are using a GPU, if not switch runtimes\n",
        "#   using Runtime > Change Runtime Type > GPU\n",
        "assert len(tf.config.list_physical_devices('GPU')) > 0"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: mitdeeplearning in /usr/local/lib/python3.6/dist-packages (0.1.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from mitdeeplearning) (1.19.4)\n",
            "Requirement already satisfied: regex in /usr/local/lib/python3.6/dist-packages (from mitdeeplearning) (2019.12.20)\n",
            "Requirement already satisfied: gym in /usr/local/lib/python3.6/dist-packages (from mitdeeplearning) (0.17.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from mitdeeplearning) (4.41.1)\n",
            "Requirement already satisfied: pyglet<=1.5.0,>=1.4.0 in /usr/local/lib/python3.6/dist-packages (from gym->mitdeeplearning) (1.5.0)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from gym->mitdeeplearning) (1.4.1)\n",
            "Requirement already satisfied: cloudpickle<1.7.0,>=1.2.0 in /usr/local/lib/python3.6/dist-packages (from gym->mitdeeplearning) (1.3.0)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.6/dist-packages (from pyglet<=1.5.0,>=1.4.0->gym->mitdeeplearning) (0.16.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HKjrdUtX_N8J"
      },
      "source": [
        "## 1.1 MNIST dataset \n",
        "\n",
        "Let's download and load the dataset and display a few random samples from it:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p2dQsHI3_N8K"
      },
      "source": [
        "mnist = tf.keras.datasets.mnist\n",
        "(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n",
        "train_images = (np.expand_dims(train_images, axis=-1)/255.).astype(np.float32)\n",
        "train_labels = (train_labels).astype(np.int64)\n",
        "test_images = (np.expand_dims(test_images, axis=-1)/255.).astype(np.float32)\n",
        "test_labels = (test_labels).astype(np.int64)"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5ZtUqOqePsRD"
      },
      "source": [
        "Our training set is made up of 28x28 grayscale images of handwritten digits. \n",
        "\n",
        "Let's visualize what some of these images and their corresponding training labels look like."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "bDBsR2lP_N8O",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 589
        },
        "outputId": "b172301b-91eb-4b65-8b6f-c42a429ee303"
      },
      "source": [
        "plt.figure(figsize=(10,10))\n",
        "random_inds = np.random.choice(60000,36)\n",
        "for i in range(36):\n",
        "    plt.subplot(6,6,i+1)\n",
        "    plt.xticks([])\n",
        "    plt.yticks([])\n",
        "    plt.grid(False)\n",
        "    image_ind = random_inds[i]\n",
        "    plt.imshow(np.squeeze(train_images[image_ind]), cmap=plt.cm.binary)\n",
        "    plt.xlabel(train_labels[image_ind])"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 36 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V6hd3Nt1_N8q"
      },
      "source": [
        "## 1.2 Neural Network for Handwritten Digit Classification\n",
        "\n",
        "We'll first build a simple neural network consisting of two fully connected layers and apply this to the digit classification task. Our network will ultimately output a probability distribution over the 10 digit classes (0-9). This first architecture we will be building is depicted below:\n",
        "\n",
        "![alt_text](https://raw.githubusercontent.com/aamini/introtodeeplearning/master/lab2/img/mnist_2layers_arch.png \"CNN Architecture for MNIST Classification\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rphS2rMIymyZ"
      },
      "source": [
        "### Fully connected neural network architecture\n",
        "To define the architecture of this first fully connected neural network, we'll once again use the Keras API and define the model using the [`Sequential`](https://www.tensorflow.org/api_docs/python/tf/keras/models/Sequential) class. Note how we first use a [`Flatten`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Flatten) layer, which flattens the input so that it can be fed into the model. \n",
        "\n",
        "In this next block, you'll define the fully connected layers of this simple work."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MMZsbjAkDKpU"
      },
      "source": [
        "def build_fc_model():\n",
        "  fc_model = tf.keras.Sequential([\n",
        "      # First define a Flatten layer\n",
        "      tf.keras.layers.Flatten(),\n",
        "\n",
        "      # '''TODO: Define the activation function for the first fully connected (Dense) layer.'''\n",
        "      tf.keras.layers.Dense(128, activation= tf.nn.relu),\n",
        "\n",
        "      # '''TODO: Define the second Dense layer to output the classification probabilities'''\n",
        "      tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n",
        "      \n",
        "  ])\n",
        "  return fc_model\n",
        "\n",
        "model = build_fc_model()"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VtGZpHVKz5Jt"
      },
      "source": [
        "As we progress through this next portion, you may find that you'll want to make changes to the architecture defined above. **Note that in order to update the model later on, you'll need to re-run the above cell to re-initialize the model. **"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mVN1_AeG_N9N"
      },
      "source": [
        "Let's take a step back and think about the network we've just created. The first layer in this network, `tf.keras.layers.Flatten`, transforms the format of the images from a 2d-array (28 x 28 pixels), to a 1d-array of 28 * 28 = 784 pixels. You can think of this layer as unstacking rows of pixels in the image and lining them up. There are no learned parameters in this layer; it only reformats the data.\n",
        "\n",
        "After the pixels are flattened, the network consists of a sequence of two `tf.keras.layers.Dense` layers. These are fully-connected neural layers. The first `Dense` layer has 128 nodes (or neurons). The second (and last) layer (which you've defined!) should return an array of probability scores that sum to 1. Each node contains a score that indicates the probability that the current image belongs to one of the handwritten digit classes.\n",
        "\n",
        "That defines our fully connected model! "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gut8A_7rCaW6"
      },
      "source": [
        "\n",
        "\n",
        "### Compile the model\n",
        "\n",
        "Before training the model, we need to define a few more settings. These are added during the model's [`compile`](https://www.tensorflow.org/api_docs/python/tf/keras/models/Sequential#compile) step:\n",
        "\n",
        "* *Loss function* â This defines how we measure how accurate the model is during training. As was covered in lecture, during training we want to minimize this function, which will \"steer\" the model in the right direction.\n",
        "* *Optimizer* â This defines how the model is updated based on the data it sees and its loss function.\n",
        "* *Metrics* â Here we can define metrics used to monitor the training and testing steps. In this example, we'll look at the *accuracy*, the fraction of the images that are correctly classified.\n",
        "\n",
        "We'll start out by using a stochastic gradient descent (SGD) optimizer initialized with a learning rate of 0.1. Since we are performing a categorical classification task, we'll want to use the [cross entropy loss](https://www.tensorflow.org/api_docs/python/tf/keras/metrics/sparse_categorical_crossentropy).\n",
        "\n",
        "You'll want to experiment with both the choice of optimizer and learning rate and evaluate how these affect the accuracy of the trained model. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lhan11blCaW7"
      },
      "source": [
        "'''TODO: Experiment with different optimizers and learning rates. How do these affect\n",
        "    the accuracy of the trained model? Which optimizers and/or learning rates yield\n",
        "    the best performance?'''\n",
        "model.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=1e-2), \n",
        "              loss='sparse_categorical_crossentropy',\n",
        "              metrics=['accuracy'])"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qKF6uW-BCaW-"
      },
      "source": [
        "### Train the model\n",
        "\n",
        "We're now ready to train our model, which will involve feeding the training data (`train_images` and `train_labels`) into the model, and then asking it to learn the associations between images and labels. We'll also need to define the batch size and the number of epochs, or iterations over the MNIST dataset, to use during training. \n",
        "\n",
        "In Lab 1, we saw how we can use `GradientTape` to optimize losses and train models with stochastic gradient descent. After defining the model settings in the `compile` step, we can also accomplish training by calling the [`fit`](https://www.tensorflow.org/api_docs/python/tf/keras/models/Sequential#fit) method on an instance of the `Model` class. We will use this to train our fully connected model\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EFMbIqIvQ2X0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e0b0920a-2a65-4966-be79-18f18da1aaa9"
      },
      "source": [
        "# Define the batch size and the number of epochs to use during training\n",
        "BATCH_SIZE = 64\n",
        "EPOCHS = 50\n",
        "\n",
        "model.fit(train_images, train_labels, batch_size=BATCH_SIZE, epochs=EPOCHS)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 1.2788 - accuracy: 0.6606\n",
            "Epoch 2/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.4390 - accuracy: 0.8839\n",
            "Epoch 3/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.3608 - accuracy: 0.9007\n",
            "Epoch 4/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.3273 - accuracy: 0.9082\n",
            "Epoch 5/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.2934 - accuracy: 0.9168\n",
            "Epoch 6/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.2816 - accuracy: 0.9206\n",
            "Epoch 7/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.2647 - accuracy: 0.9269\n",
            "Epoch 8/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.2525 - accuracy: 0.9299\n",
            "Epoch 9/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.2426 - accuracy: 0.9330\n",
            "Epoch 10/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.2382 - accuracy: 0.9336\n",
            "Epoch 11/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.2234 - accuracy: 0.9380\n",
            "Epoch 12/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.2153 - accuracy: 0.9405\n",
            "Epoch 13/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.2085 - accuracy: 0.9411\n",
            "Epoch 14/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1954 - accuracy: 0.9454\n",
            "Epoch 15/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1922 - accuracy: 0.9476\n",
            "Epoch 16/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1857 - accuracy: 0.9488\n",
            "Epoch 17/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1741 - accuracy: 0.9532\n",
            "Epoch 18/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1725 - accuracy: 0.9513\n",
            "Epoch 19/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1709 - accuracy: 0.9518\n",
            "Epoch 20/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1595 - accuracy: 0.9547\n",
            "Epoch 21/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1597 - accuracy: 0.9556\n",
            "Epoch 22/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1551 - accuracy: 0.9562\n",
            "Epoch 23/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1518 - accuracy: 0.9576\n",
            "Epoch 24/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1492 - accuracy: 0.9589\n",
            "Epoch 25/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1409 - accuracy: 0.9602\n",
            "Epoch 26/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1386 - accuracy: 0.9616\n",
            "Epoch 27/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1385 - accuracy: 0.9614\n",
            "Epoch 28/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1336 - accuracy: 0.9638\n",
            "Epoch 29/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1312 - accuracy: 0.9641\n",
            "Epoch 30/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1264 - accuracy: 0.9652\n",
            "Epoch 31/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1257 - accuracy: 0.9646\n",
            "Epoch 32/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1236 - accuracy: 0.9661\n",
            "Epoch 33/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1197 - accuracy: 0.9667\n",
            "Epoch 34/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1230 - accuracy: 0.9662\n",
            "Epoch 35/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1154 - accuracy: 0.9673\n",
            "Epoch 36/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1112 - accuracy: 0.9689\n",
            "Epoch 37/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1077 - accuracy: 0.9701\n",
            "Epoch 38/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1104 - accuracy: 0.9689\n",
            "Epoch 39/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1093 - accuracy: 0.9693\n",
            "Epoch 40/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1056 - accuracy: 0.9702\n",
            "Epoch 41/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1039 - accuracy: 0.9712\n",
            "Epoch 42/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1008 - accuracy: 0.9719\n",
            "Epoch 43/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0989 - accuracy: 0.9729\n",
            "Epoch 44/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1008 - accuracy: 0.9730\n",
            "Epoch 45/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0980 - accuracy: 0.9721\n",
            "Epoch 46/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0980 - accuracy: 0.9734\n",
            "Epoch 47/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0933 - accuracy: 0.9747\n",
            "Epoch 48/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0931 - accuracy: 0.9743\n",
            "Epoch 49/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0879 - accuracy: 0.9765\n",
            "Epoch 50/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0880 - accuracy: 0.9760\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7f0c6fda8278>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W3ZVOhugCaXA"
      },
      "source": [
        "As the model trains, the loss and accuracy metrics are displayed. With five epochs and a learning rate of 0.01, this fully connected model should achieve an accuracy of approximatley 0.97 (or 97%) on the training data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oEw4bZgGCaXB"
      },
      "source": [
        "### Evaluate accuracy on the test dataset\n",
        "\n",
        "Now that we've trained the model, we can ask it to make predictions about a test set that it hasn't seen before. In this example, the `test_images` array comprises our test dataset. To evaluate accuracy, we can check to see if the model's predictions match the labels from the `test_labels` array. \n",
        "\n",
        "Use the [`evaluate`](https://www.tensorflow.org/api_docs/python/tf/keras/models/Sequential#evaluate) method to evaluate the model on the test dataset!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VflXLEeECaXC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f1eee8f9-5db3-4a3f-f2b5-3367ec460b02"
      },
      "source": [
        "'''TODO: Use the evaluate method to test the model!'''\n",
        "test_loss, test_acc = model.evaluate(test_images, test_labels)\n",
        "\n",
        "print('Test accuracy:', test_acc)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "313/313 [==============================] - 1s 2ms/step - loss: 0.1044 - accuracy: 0.9684\n",
            "Test accuracy: 0.9684000015258789\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yWfgsmVXCaXG"
      },
      "source": [
        "You may observe that the accuracy on the test dataset is a little lower than the accuracy on the training dataset. This gap between training accuracy and test accuracy is an example of *overfitting*, when a machine learning model performs worse on new data than on its training data. \n",
        "\n",
        "What is the highest accuracy you can achieve with this first fully connected model? Since the handwritten digit classification task is pretty straightforward, you may be wondering how we can do better...\n",
        "\n",
        "![Deeper...](https://i.kym-cdn.com/photos/images/newsfeed/000/534/153/f87.jpg)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "baIw9bDf8v6Z"
      },
      "source": [
        "## 1.3 Convolutional Neural Network (CNN) for handwritten digit classification"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_J72Yt1o_fY7"
      },
      "source": [
        "As we saw in lecture, convolutional neural networks (CNNs) are particularly well-suited for a variety of tasks in computer vision, and have achieved near-perfect accuracies on the MNIST dataset. We will now build a CNN composed of two convolutional layers and pooling layers, followed by two fully connected layers, and ultimately output a probability distribution over the 10 digit classes (0-9). The CNN we will be building is depicted below:\n",
        "\n",
        "![alt_text](https://raw.githubusercontent.com/aamini/introtodeeplearning/master/lab2/img/convnet_fig.png \"CNN Architecture for MNIST Classification\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EEHqzbJJAEoR"
      },
      "source": [
        "### Define the CNN model\n",
        "\n",
        "We'll use the same training and test datasets as before, and proceed similarly as our fully connected network to define and train our new CNN model. To do this we will explore two layers we have not encountered before: you can use  [`keras.layers.Conv2D` ](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D) to define convolutional layers and [`keras.layers.MaxPool2D`](https://www.tensorflow.org/api_docs/python/tf/keras/layers/MaxPool2D) to define the pooling layers. Use the parameters shown in the network architecture above to define these layers and build the CNN model."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vec9qcJs-9W5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0fd661f1-17d2-4fa3-d0a7-0e00b7a0c659"
      },
      "source": [
        "def build_cnn_model():\n",
        "    cnn_model = tf.keras.Sequential([\n",
        "\n",
        "        # TODO: Define the first convolutional layer\n",
        "        tf.keras.layers.Conv2D(24, kernel_size=(3, 3), activation=tf.nn.relu), \n",
        "\n",
        "        # TODO: Define the first max pooling layer\n",
        "        tf.keras.layers.MaxPool2D(pool_size=(2, 2)),\n",
        "\n",
        "        # TODO: Define the second convolutional layer\n",
        "        tf.keras.layers.Conv2D(36, kernel_size=(3, 3), activation=tf.nn.relu),\n",
        "\n",
        "        # TODO: Define the second max pooling layer\n",
        "        tf.keras.layers.MaxPool2D(pool_size=(2, 2)),\n",
        "\n",
        "        tf.keras.layers.Flatten(),\n",
        "        tf.keras.layers.Dense(128, activation=tf.nn.relu),\n",
        "\n",
        "        # TODO: Define the last Dense layer to output the classification \n",
        "        # probabilities. Pay attention to the activation needed a probability\n",
        "        # output\n",
        "        tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n",
        "    ])\n",
        "    \n",
        "    return cnn_model\n",
        "  \n",
        "cnn_model = build_cnn_model()\n",
        "# Initialize the model by passing some data through\n",
        "cnn_model.predict(train_images[[0]])\n",
        "# Print the summary of the layers in the model.\n",
        "print(cnn_model.summary())"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d (Conv2D)              (None, 26, 26, 24)        240       \n",
            "_________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D) (None, 13, 13, 24)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_1 (Conv2D)            (None, 11, 11, 36)        7812      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 5, 5, 36)          0         \n",
            "_________________________________________________________________\n",
            "flatten_1 (Flatten)          (None, 900)               0         \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 128)               115328    \n",
            "_________________________________________________________________\n",
            "dense_3 (Dense)              (None, 10)                1290      \n",
            "=================================================================\n",
            "Total params: 124,670\n",
            "Trainable params: 124,670\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kUAXIBynCih2"
      },
      "source": [
        "### Train and test the CNN model\n",
        "\n",
        "Now, as before, we can define the loss function, optimizer, and metrics through the `compile` method. Compile the CNN model with an optimizer and learning rate of choice:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vheyanDkCg6a"
      },
      "source": [
        "'''TODO: Define the compile operation with your optimizer and learning rate of choice'''\n",
        "cnn_model.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=1e-2), \n",
        "                  loss='sparse_categorical_crossentropy',\n",
        "                  metrics=['accuracy'])"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U19bpRddC7H_"
      },
      "source": [
        "As was the case with the fully connected model, we can train our CNN using the `fit` method via the Keras API."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YdrGZVmWDK4p",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b060af07-de89-4bc9-9ce8-416db86aab72"
      },
      "source": [
        "'''TODO: Use model.fit to train the CNN model, with the same batch_size and number of epochs previously used.'''\n",
        "cnn_model.fit(train_images, train_labels, batch_size=BATCH_SIZE, epochs=EPOCHS)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "938/938 [==============================] - 3s 3ms/step - loss: 1.5446 - accuracy: 0.5238\n",
            "Epoch 2/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.2719 - accuracy: 0.9166\n",
            "Epoch 3/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1809 - accuracy: 0.9462\n",
            "Epoch 4/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1345 - accuracy: 0.9596\n",
            "Epoch 5/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.1105 - accuracy: 0.9670\n",
            "Epoch 6/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0969 - accuracy: 0.9711\n",
            "Epoch 7/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0827 - accuracy: 0.9739\n",
            "Epoch 8/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0730 - accuracy: 0.9781\n",
            "Epoch 9/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0657 - accuracy: 0.9789\n",
            "Epoch 10/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0609 - accuracy: 0.9807\n",
            "Epoch 11/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0553 - accuracy: 0.9826\n",
            "Epoch 12/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0561 - accuracy: 0.9819\n",
            "Epoch 13/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0542 - accuracy: 0.9834\n",
            "Epoch 14/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0485 - accuracy: 0.9857\n",
            "Epoch 15/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0448 - accuracy: 0.9861\n",
            "Epoch 16/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0425 - accuracy: 0.9863\n",
            "Epoch 17/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0410 - accuracy: 0.9873\n",
            "Epoch 18/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0393 - accuracy: 0.9874\n",
            "Epoch 19/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0355 - accuracy: 0.9894\n",
            "Epoch 20/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0334 - accuracy: 0.9896\n",
            "Epoch 21/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0343 - accuracy: 0.9898\n",
            "Epoch 22/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0325 - accuracy: 0.9897\n",
            "Epoch 23/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0304 - accuracy: 0.9909\n",
            "Epoch 24/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0297 - accuracy: 0.9910\n",
            "Epoch 25/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0311 - accuracy: 0.9906\n",
            "Epoch 26/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0293 - accuracy: 0.9911\n",
            "Epoch 27/50\n",
            "938/938 [==============================] - 3s 3ms/step - loss: 0.0263 - accuracy: 0.9920\n",
            "Epoch 28/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0258 - accuracy: 0.9922\n",
            "Epoch 29/50\n",
            "938/938 [==============================] - 3s 3ms/step - loss: 0.0257 - accuracy: 0.9922\n",
            "Epoch 30/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0243 - accuracy: 0.9927\n",
            "Epoch 31/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0228 - accuracy: 0.9933\n",
            "Epoch 32/50\n",
            "938/938 [==============================] - 3s 3ms/step - loss: 0.0226 - accuracy: 0.9931\n",
            "Epoch 33/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0205 - accuracy: 0.9934\n",
            "Epoch 34/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0210 - accuracy: 0.9937\n",
            "Epoch 35/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0215 - accuracy: 0.9938\n",
            "Epoch 36/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0179 - accuracy: 0.9951\n",
            "Epoch 37/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0181 - accuracy: 0.9944\n",
            "Epoch 38/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0175 - accuracy: 0.9945\n",
            "Epoch 39/50\n",
            "938/938 [==============================] - 3s 3ms/step - loss: 0.0189 - accuracy: 0.9943\n",
            "Epoch 40/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0162 - accuracy: 0.9953\n",
            "Epoch 41/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0171 - accuracy: 0.9947\n",
            "Epoch 42/50\n",
            "938/938 [==============================] - 3s 3ms/step - loss: 0.0158 - accuracy: 0.9952\n",
            "Epoch 43/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0144 - accuracy: 0.9961\n",
            "Epoch 44/50\n",
            "938/938 [==============================] - 3s 3ms/step - loss: 0.0142 - accuracy: 0.9962\n",
            "Epoch 45/50\n",
            "938/938 [==============================] - 3s 3ms/step - loss: 0.0138 - accuracy: 0.9965\n",
            "Epoch 46/50\n",
            "938/938 [==============================] - 3s 3ms/step - loss: 0.0126 - accuracy: 0.9963\n",
            "Epoch 47/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0128 - accuracy: 0.9962\n",
            "Epoch 48/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0124 - accuracy: 0.9964\n",
            "Epoch 49/50\n",
            "938/938 [==============================] - 2s 3ms/step - loss: 0.0123 - accuracy: 0.9967\n",
            "Epoch 50/50\n",
            "938/938 [==============================] - 2s 2ms/step - loss: 0.0117 - accuracy: 0.9968\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7f0cd35190b8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pEszYWzgDeIc"
      },
      "source": [
        "Great! Now that we've trained the model, let's evaluate it on the test dataset using the [`evaluate`](https://www.tensorflow.org/api_docs/python/tf/keras/models/Sequential#evaluate) method:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JDm4znZcDtNl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6702b30a-2357-4dba-aae5-b768667fe82e"
      },
      "source": [
        "'''TODO: Use the evaluate method to test the model!'''\n",
        "test_loss, test_acc = model.evaluate(test_images, test_labels)\n",
        "\n",
        "print('Test accuracy:', test_acc)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "313/313 [==============================] - 1s 2ms/step - loss: 0.1044 - accuracy: 0.9684\n",
            "Test accuracy: 0.9684000015258789\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2rvEgK82Glv9"
      },
      "source": [
        "What is the highest accuracy you're able to achieve using the CNN model, and how does the accuracy of the CNN model compare to the accuracy of the simple fully connected network? What optimizers and learning rates seem to be optimal for training the CNN model? "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xsoS7CPDCaXH"
      },
      "source": [
        "### Make predictions with the CNN model\n",
        "\n",
        "With the model trained, we can use it to make predictions about some images. The [`predict`](https://www.tensorflow.org/api_docs/python/tf/keras/models/Sequential#predict) function call generates the output predictions given a set of input samples.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Gl91RPhdCaXI"
      },
      "source": [
        "predictions = cnn_model.predict(test_images)"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x9Kk1voUCaXJ"
      },
      "source": [
        "With this function call, the model has predicted the label for each image in the testing set. Let's take a look at the prediction for the first image in the test dataset:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3DmJEUinCaXK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "acdcbfcb-0a49-429c-e2a9-bc909a072cd8"
      },
      "source": [
        "predictions[0]"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1.9168053e-10, 5.8750985e-08, 4.1524867e-08, 1.1501919e-07,\n",
              "       1.3247460e-12, 7.7646528e-14, 3.4117491e-17, 9.9999976e-01,\n",
              "       2.6527222e-10, 3.3327247e-08], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-hw1hgeSCaXN"
      },
      "source": [
        "As you can see, a prediction is an array of 10 numbers. Recall that the output of our model is a probability distribution over the 10 digit classes. Thus, these numbers describe the model's \"confidence\" that the image corresponds to each of the 10 different digits. \n",
        "\n",
        "Let's look at the digit that has the highest confidence for the first image in the test dataset:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qsqenuPnCaXO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9fe5216a-f20a-404a-faf8-9eefb0309f0f"
      },
      "source": [
        "'''TODO: identify the digit with the highest confidence prediction for the first\n",
        "    image in the test dataset. '''\n",
        "prediction = np.argmax(predictions[0])\n",
        "\n",
        "print(prediction)"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "7\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E51yS7iCCaXO"
      },
      "source": [
        "So, the model is most confident that this image is a \"???\". We can check the test label (remember, this is the true identity of the digit) to see if this prediction is correct:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sd7Pgsu6CaXP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "outputId": "cda0848c-66ea-4a10-de5a-1b89ca282ac6"
      },
      "source": [
        "print(\"Label of this digit is:\", test_labels[0])\n",
        "plt.imshow(test_images[0,:,:,0], cmap=plt.cm.binary)"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Label of this digit is: 7\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f0cd3768470>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ygh2yYC972ne"
      },
      "source": [
        "It is! Let's visualize the classification results on the MNIST dataset. We will plot images from the test dataset along with their predicted label, as well as a histogram that provides the prediction probabilities for each of the digits:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HV5jw-5HwSmO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 252
        },
        "outputId": "64f4af93-0180-4d11-df3a-ef2588efd58a"
      },
      "source": [
        "#@title Change the slider to look at the model's predictions! { run: \"auto\" }\n",
        "\n",
        "image_index = 44 #@param {type:\"slider\", min:0, max:100, step:1}\n",
        "plt.subplot(1,2,1)\n",
        "mdl.lab2.plot_image_prediction(image_index, predictions, test_labels, test_images)\n",
        "plt.subplot(1,2,2)\n",
        "mdl.lab2.plot_value_prediction(image_index, predictions,  test_labels)"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kgdvGD52CaXR"
      },
      "source": [
        "We can also plot several images along with their predictions, where correct prediction labels are blue and incorrect prediction labels are red. The number gives the percent confidence (out of 100) for the predicted label. Note the model can be very confident in an incorrect prediction!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hQlnbqaw2Qu_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 589
        },
        "outputId": "bc7dca9e-948d-41c1-93a8-df0a8ac9d0ae"
      },
      "source": [
        "# Plots the first X test images, their predicted label, and the true label\n",
        "# Color correct predictions in blue, incorrect predictions in red\n",
        "num_rows = 5\n",
        "num_cols = 4\n",
        "num_images = num_rows*num_cols\n",
        "plt.figure(figsize=(2*2*num_cols, 2*num_rows))\n",
        "for i in range(num_images):\n",
        "  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n",
        "  mdl.lab2.plot_image_prediction(i, predictions, test_labels, test_images)\n",
        "  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n",
        "  mdl.lab2.plot_value_prediction(i, predictions, test_labels)\n"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x720 with 40 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k-2glsRiMdqa"
      },
      "source": [
        "## 1.4 Training the model 2.0\n",
        "\n",
        "Earlier in the lab, we used the [`fit`](https://www.tensorflow.org/api_docs/python/tf/keras/models/Sequential#fit) function call to train the model. This function is quite high-level and intuitive, which is really useful for simpler models. As you may be able to tell, this function abstracts away many details in the training call, and we have less control over training model, which could be useful in other contexts. \n",
        "\n",
        "As an alternative to this, we can use the [`tf.GradientTape`](https://www.tensorflow.org/api_docs/python/tf/GradientTape) class to record differentiation operations during training, and then call the [`tf.GradientTape.gradient`](https://www.tensorflow.org/api_docs/python/tf/GradientTape#gradient) function to actually compute the gradients. You may recall seeing this in Lab 1 Part 1, but let's take another look at this here.\n",
        "\n",
        "We'll use this framework to train our `cnn_model` using stochastic gradient descent."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wq34id-iN1Ml",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 558
        },
        "outputId": "d6cb36a0-43f1-425d-e774-f1e008e3f7b3"
      },
      "source": [
        "# Rebuild the CNN model\n",
        "cnn_model = build_cnn_model()\n",
        "\n",
        "batch_size = 12\n",
        "loss_history = mdl.util.LossHistory(smoothing_factor=0.95) # to record the evolution of the loss\n",
        "plotter = mdl.util.PeriodicPlotter(sec=2, xlabel='Iterations', ylabel='Loss', scale='semilogy')\n",
        "optimizer = tf.keras.optimizers.SGD(learning_rate=1e-2) # define our optimizer\n",
        "\n",
        "if hasattr(tqdm, '_instances'): tqdm._instances.clear() # clear if it exists\n",
        "\n",
        "for idx in tqdm(range(0, train_images.shape[0], batch_size)):\n",
        "  # First grab a batch of training data and convert the input images to tensors\n",
        "  (images, labels) = (train_images[idx:idx+batch_size], train_labels[idx:idx+batch_size])\n",
        "  images = tf.convert_to_tensor(images, dtype=tf.float32)\n",
        "\n",
        "  # GradientTape to record differentiation operations\n",
        "  with tf.GradientTape() as tape:\n",
        "    #'''TODO: feed the images into the model and obtain the predictions'''\n",
        "    logits = cnn_model(images)\n",
        "\n",
        "    #'''TODO: compute the categorical cross entropy loss\n",
        "    loss_value = tf.keras.backend.sparse_categorical_crossentropy(labels, logits) # TODO\n",
        "\n",
        "  loss_history.append(loss_value.numpy().mean()) # append the loss to the loss_history record\n",
        "  plotter.plot(loss_history.get())\n",
        "\n",
        "  # Backpropagation\n",
        "  '''TODO: Use the tape to compute the gradient against all parameters in the CNN model.\n",
        "      Use cnn_model.trainable_variables to access these parameters.''' \n",
        "  grads = tape.gradient(loss_value, cnn_model.trainable_variables)\n",
        "  optimizer.apply_gradients(zip(grads, cnn_model.trainable_variables))\n"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "100%|ââââââââââ| 5000/5000 [00:38<00:00, 129.22it/s]\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3cNtDhVaqEdR"
      },
      "source": [
        "## 1.5 Conclusion\n",
        "In this part of the lab, you had the chance to play with different MNIST classifiers with different architectures (fully-connected layers only, CNN), and experiment with how different hyperparameters affect accuracy (learning rate, etc.). The next part of the lab explores another application of CNNs, facial detection, and some drawbacks of AI systems in real world applications, like issues of bias. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l1LQWV7ANEAT"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}